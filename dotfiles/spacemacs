;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     (helm :variables helm-enable-auto-resize t)
     auto-completion
     better-defaults
     emacs-lisp
     git
     multiple-cursors
     treemacs
     org
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     ;; spell-checking
     syntax-checking
     version-control
     lsp

     ;; additional languages
     markdown
     sml
     ruby
     csv
     html
     yaml
     (javascript :variables
                 js2-basic-offset 2)
     racket
     python
     c-c++
     haskell
     ipython-notebook
     idris
     java
     json
     react
     ocaml
     php
     ess
     graphviz
     reasonml
     shell-scripts
     (typescript :variables
                 typescript-fmt-on-save t
                 typescript-indent-level 2
                 typescript-fmt-tool 'prettier)
     coq
     (latex :variables
            TeX-view-program-selection '((output-pdf "PDF Tools"))
            TeX-source-correlate-start-server t
            TeX-source-correlate-method 'synctex
            TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
            TeX-error-overview-open-after-TeX-run t)
     pdf

     ;; tools
     copy-as-format
     docker
     visual-regexp
     pass
     ibuffer
     (colors :variables colors-enable-nyan-cat-progress-bar t)
     unicode-fonts
     xclipboard)

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages
   '((alloy-mode :location (recipe :fetcher github
                                   :repo "dwwmmn/alloy-mode"
                                   :files ("alloy-mode.el"))))

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(evil-escape
                                    emmet-mode
                                    linum)

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style '(hybrid :variables
                                       hybrid-style-enable-hjkl-bindings t
                                       vim-style-retain-visual-state-on-shift	t)

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((bookmarks . 20)
                                (recents . 2)
                                (projects . 2))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names t

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but lines are only visual lines are counted. For example, folded lines
   ;; will not be counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis t

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server t

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server t

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%f@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
  )


(defun my/multiple-cursors ()
  "Multiple cursor configurations"

  (setq-default evil-mc-undo-cursors-on-keyboard-quit t)
  (evil-define-command evil-mc-toggle-cursor-here ()
    "Toggle a cursor at point."
    :repeat ignore
    :evil-mc t
    (evil-mc-run-cursors-before)
    (setq evil-mc-frozen t)
    (force-mode-line-update)
    (unless (evil-mc-undo-cursor-at-pos (point))
      (evil-mc-make-cursor-at-pos (point))))


  (defun evil-mc-resume/pause-cursors ()
    "Toggle pause/resume all cursors."
    (interactive)
    (setq evil-mc-frozen (not evil-mc-frozen))
    (force-mode-line-update))

  (dolist (keybinding `((,(kbd "C-M-o") . evil-mc-toggle-cursor-here)
                        (,(kbd "C-M-p") . evil-mc-resume/pause-cursors)))
    (define-key evil-normal-state-map (car keybinding) (cdr keybinding))))

(defun my/thai-autocomplete ()
  "Broken Thai autocomplete fix"

  (require 'thai-word)

  (defun my/he-dabbrev-beg ()
    (save-excursion
      (thai-backward-word 1)
      (point)))

  (defun my/he-dabbrev-search (pattern &optional reverse limit)
    (let ((result ())
          (regpat (concat (regexp-quote pattern) "\\sw+")))
      (while (and (not result)
                  (if reverse
                      (re-search-backward regpat limit t)
                    (re-search-forward regpat limit t)))
        (setq result (buffer-substring-no-properties (match-beginning 0)
                                                     (match-end 0)))
        (when result
          (save-excursion
            (let ((word-beg (match-beginning 0)))
              (goto-char word-beg)
              (thai-forward-word 1)
              (setq result (buffer-substring-no-properties word-beg (point))))))
        (if (or (and hippie-expand-dabbrev-as-symbol
                     (> (match-beginning 0) (point-min))
                     (memq (char-syntax (char-after (1- (match-beginning 0))))
                           '(?_ ?w)))
                (he-string-member result he-tried-table t))
            (setq result nil)))     ; ignore if bad prefix or already in table
      result))

  (defun my/try-expand-dabbrev (old)
    (let ((old/he-dabbrev-search (symbol-function 'he-dabbrev-search))
          (old/he-dabbrev-beg (symbol-function 'he-dabbrev-beg)))
      (fset 'he-dabbrev-search (symbol-function 'my/he-dabbrev-search))
      (fset 'he-dabbrev-beg (symbol-function 'my/he-dabbrev-beg))
      (unwind-protect
          (try-expand-dabbrev old)
        (fset 'he-dabbrev-search old/he-dabbrev-search)
        (fset 'he-dabbrev-beg old/he-dabbrev-beg))))

  (add-to-list 'hippie-expand-try-functions-list 'my/try-expand-dabbrev))

(defun my/org-mode ()
  "Settings for org-mode"



  (with-eval-after-load 'org

    (setq-default org-agenda-files '("~/org/main.org"))
    (setq-default org-format-latex-options (plist-put org-format-latex-options :scale 2.3))
    (setq-default org-startup-with-latex-preview t)

    (defun update-org-latex-fragment-scale ()
      (org-toggle-latex-fragment '(16))
      (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
        (plist-put org-format-latex-options :scale (* 1.6 text-scale-factor)))
      (org-toggle-latex-fragment '(16)))

    (add-hook 'org-mode-hook
              (lambda () (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale nil t)))


    ;; from http://slumpy.org/blog/2017-02-01-automatic-latex-preview-in-org-mode/
    (defvar kk/org-latex-fragment-last nil
      "Holds last fragment/environment you were on.")

    (defun kk/org-in-latex-fragment-p ()
      "Return the point where the latex fragment begins, if inside
  a latex fragment. Else return false"
      (let* ((el (org-element-context))
             (el-type (car el)))
        (and (or (eq 'latex-fragment el-type) (eq 'latex-environment el-type))
             (org-element-property :begin el))))

    (defun kk/org-latex-fragment-toggle ()
      "Toggle a latex fragment image "
      (and (eq 'org-mode major-mode)
           (let ((begin (kk/org-in-latex-fragment-p)))
             (cond
              ;; were on a fragment and now on a new fragment
              ((and
                ;; fragment we were on
                kk/org-latex-fragment-last
                ;; and are on a fragment now
                begin

                ;; but not on the last one this is a little tricky. as you edit the
                ;; fragment, it is not equal to the last one. We use the begin
                ;; property which is less likely to change for the comparison.
                (not (and kk/org-latex-fragment-last
                          (= begin
                             kk/org-latex-fragment-last))))
               ;; go back to last one and put image back, provided there is still a fragment there
               (save-excursion
                 (goto-char kk/org-latex-fragment-last)
                 (when (kk/org-in-latex-fragment-p) (org-preview-latex-fragment))

                 ;; now remove current image
                 (goto-char begin)
                 (let ((ov (loop for ov in (org--list-latex-overlays)
                                 if
                                 (and
                                  (<= (overlay-start ov) (point))
                                  (>= (overlay-end ov) (point)))
                                 return ov)))
                   (when ov
                     (delete-overlay ov)))
                 ;; and save new fragment
                 (setq kk/org-latex-fragment-last begin)))

              ;; were on a fragment and now are not on a fragment
              ((and
                ;; not on a fragment now
                (not begin)
                ;; but we were on one
                kk/org-latex-fragment-last)
               ;; put image back on, provided that there is still a fragment here.
               (save-excursion
                 (goto-char kk/org-latex-fragment-last)
                 (when (kk/org-in-latex-fragment-p) (org-preview-latex-fragment)))

               ;; unset last fragment
               (setq kk/org-latex-fragment-last nil))

              ;; were not on a fragment, and now are
              ((and
                ;; we were not one one
                (not kk/org-latex-fragment-last)
                ;; but now we are
                begin)
               ;; remove image
               (save-excursion
                 (goto-char begin)
                 (let ((ov (loop for ov in (org--list-latex-overlays)
                                 if
                                 (and
                                  (<= (overlay-start ov) (point))
                                  (>= (overlay-end ov) (point)))
                                 return ov)))
                   (when ov
                     (delete-overlay ov))))
               (setq kk/org-latex-fragment-last begin))))))

    (add-hook 'org-mode-hook
              (lambda () (add-hook 'post-command-hook 'kk/org-latex-fragment-toggle t t)))
    ))

(defun my/hooks ()
  "All custom hooks"

  (defun my/file-find-hook ()
    ;; open as root
    (when (and (not (file-writable-p buffer-file-name))
               (file-exists-p buffer-file-name)
               (y-or-n-p "File not writable. Open as root?"))
      (let ((obuf (current-buffer)))
        (spacemacs/sudo-edit)
        (unless (equal (current-buffer) obuf)
          (let (kill-buffer-query-functions kill-buffer-hook)
            (kill-buffer obuf))))))


  (add-hook 'find-file-hook 'my/file-find-hook)
  (add-hook 'conf-xdefaults-mode-hook 'rainbow-mode)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

(defun my/indent ()
  "Set indentation level"

  (setq-default web-mode-markup-indent-offset 2)
  (setq-default c-basic-offset 4)
  (setq-default web-mode-code-indent-offset 2)
  (setq-default javascript-indent-level 2)
  (setq-default js-indent-level 2)
  (setq-default react-indent-level 2)
  (setq-default css-indent-offset 2))


(defun my/racket-mode ()
  "Racket-mode customization"

  (defun insert-lambda ()
    (interactive)
    (insert-char (make-char 'greek-iso8859-7 107) 1))
  (global-set-key (kbd "s-\\") 'insert-lambda)

  (put 'generator 'racket-indent-function 1)
  (put 'match-define-values 'racket-indent-function 1)
  (put 'for/stream 'racket-indent-function 'racket--indent-for)
  (put 'for*/stream 'racket-indent-function 'racket--indent-for)
  (put 'for/all 'racket-indent-function 'racket--indent-for)
  (put 'for*/all 'racket-indent-function 'racket--indent-for)

  ;; my stuff

  (put 'for/hash! 'racket-indent-function 'racket--indent-for)
  (put 'for/input-port 'racket-indent-function 'racket--indent-for)
  (put 'for/filter-list 'racket-indent-function 'racket--indent-for)

  (put 'let0 'racket-indent-function 1)
  (put 'let/effect 'racket-indent-function 1)

  (put 'cases 'racket-indent-function 1)

  (put 'module/path 'racket-indent-function 2)

  (put 'section 'racket-indent-function 1)


  (put 'pyret-for 'racket-indent-function 2)

  ;; without this, jump-to-definition in Racket will bring up "visit tags table"
  ;; see https://github.com/syl20bnr/spacemacs/issues/9756
  (setq-default spacemacs-default-jump-handlers
                (remove 'evil-goto-definition spacemacs-default-jump-handlers)))

(defun my/scribble ()
  "Scribble stuff"

  (load "~/emacs/scribble.el") ;; Load Scribble

  ;; Register Pollen extension as Scribble
  (setq-default auto-mode-alist (cons '("\\.pm" . scribble-mode) auto-mode-alist)))

(defun my/git-gutter+ ()
  "git-gutter+ fixes. See https://github.com/nonsequitur/git-gutter-plus/issues/42#issuecomment-464463744"

  (with-eval-after-load 'git-gutter+
    (defun git-gutter+-remote-default-directory (dir file)
      (let* ((vec (tramp-dissect-file-name file))
             (method (tramp-file-name-method vec))
             (user (tramp-file-name-user vec))
             (domain (tramp-file-name-domain vec))
             (host (tramp-file-name-host vec))
             (port (tramp-file-name-port vec)))
        (tramp-make-tramp-file-name method user domain host port dir)))

    (defun git-gutter+-remote-file-path (dir file)
      (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
        (replace-regexp-in-string (concat "\\`" dir) "" file)))))

(defun my/linux ()
  "Linux configuration"

  ;; (keychain-refresh-environment) ;; only for Linux
  nil)

(defun my/bracket ()
  "Fix bracket keyboard shortcut"

  (defmacro fix-bracket (state map)
    `(progn
       (evil-define-key ,state ,map (kbd "[") nil)
       (evil-define-key ,state ,map (kbd "]") nil)
       (evil-define-key ,state ,map (kbd "[ b") 'previous-buffer)
       (evil-define-key ,state ,map (kbd "] b") 'next-buffer)
       (evil-define-key ,state ,map (kbd "[ f") 'evil-unimpaired/previous-file)
       (evil-define-key ,state ,map (kbd "] f") 'evil-unimpaired/next-file)
       (evil-define-key ,state ,map (kbd "[ w") 'previous-multiframe-window)
       (evil-define-key ,state ,map (kbd "] w") 'next-multiframe-window)))

  (fix-bracket nil evil-motion-state-map)
  (fix-bracket '(normal motion) message-buffer-mode-map)
  (fix-bracket '(normal motion) help-mode-map)

  (with-eval-after-load 'magit
    (fix-bracket '(normal motion) magit-status-mode-map)
    (fix-bracket '(normal motion) magit-diff-mode-map))

  (with-eval-after-load 'racket-mode
    (fix-bracket '(normal motion) racket-repl-mode-map))

  (with-eval-after-load 'pdf-tools
    (fix-bracket (normal motion) pdf-view-mode-map)))

(defun my/pdf ()
  "PDF mode"

  ;; Make PDF reader tracks the cursor
  ;; (run-with-idle-timer 1 t (lambda ()
  ;;                            (when (eq major-mode 'latex-mode)
  ;;                              (funcall 'pdf-sync-forward-search))))
  ;; (defun my/company-dabbrev-ignore-buffers (buffer)
  ;;   "ignore the following buffers"
  ;;   (string-match-p "\\.pdf" (buffer-name buffer)))
  ;; (setq company-dabbrev-ignore-buffers 'my/company-dabbrev-ignore-buffers)
                                        ; this somehow is not working
                                        ; (add-to-list 'hippie-expand-ignore-buffers 'pdf-view-mode)

  nil)

(defun my/general ()
  "General stuff"

  (defun display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))

  ;; touch (s-t)

  (defun touch ()
    "updates mtime on the file for the current buffer"
    (interactive)
    (shell-command (concat "touch " (shell-quote-argument (buffer-file-name))))
    (clear-visited-file-modtime))
  (global-set-key (kbd "s-t") 'touch)


  ;; backward-delete-word (M-DEL)

  (defun delete-word (arg)
    "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
    (interactive "p")
    (if (use-region-p)
        (delete-region (region-beginning) (region-end))
      (delete-region (point) (progn (forward-word arg) (point)))))
  (defun backward-delete-word (arg)
    "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
    (interactive "p")
    (delete-word (- arg)))
  (global-set-key (kbd "M-<DEL>") 'backward-delete-word))

(defun my/keybinding ()
  "Keybinding"

  ;; Make evil-mode up/down operate in screen lines instead of logical lines
  (dolist (state `(,evil-normal-state-map ,evil-visual-state-map))
    (dolist (keybinding `((,(kbd "j") . evil-next-visual-line)
                          (,(kbd "k") . evil-previous-visual-line)
                          (,(kbd "<down>") . evil-next-visual-line)
                          (,(kbd "<up>") . evil-previous-visual-line)))
      (define-key state (car keybinding) (cdr keybinding))))

  (define-key evil-hybrid-state-map (kbd "C-p") 'evil-paste-before)
  (define-key evil-hybrid-state-map (kbd "C-h") 'left-char)
  (define-key evil-hybrid-state-map (kbd "C-j") 'next-line)
  (define-key evil-hybrid-state-map (kbd "C-k") 'previous-line)
  (define-key evil-hybrid-state-map (kbd "C-l") 'right-char)
  (define-key evil-hybrid-state-map (kbd "C-o") 'evil-execute-in-normal-state)

  (define-key evil-normal-state-map (kbd "/") 'helm-swoop)

  (define-key company-active-map (kbd "C-l") nil)

  (with-eval-after-load 'helm
    (define-key helm-map (kbd "C-d") 'helm-next-page)
    (define-key helm-map (kbd "C-u") 'helm-previous-page))

  (spacemacs/set-leader-keys
    "<SPC>" 'avy-goto-word-or-subword-1
    ":" 'helm-M-x
    "q q" 'spacemacs/frame-killer
    "q Q" 'spacemacs/prompt-kill-emacs
    "q K" 'spacemacs/kill-emacs))


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."


  (setq-default
   kill-ring-max 500                   ;; we have a lot of memory. Let's use it!
   evil-kill-on-visual-paste nil       ;; make it so that pasting in visual mode doesn't copy
   evil-cross-lines t                  ;; enable hjkl and arrows to cross lines
   kill-do-not-save-duplicates t       ;; don't save duplicates in kill-ring
   vc-follow-symlinks t                ;; follow symlink
   undo-tree-enable-undo-in-region nil ;; undo-tree is buggy when this option is enabled
   evil-want-fine-undo t               ;; still not used to use normal mode as a main mode, so need fine undo
   create-lockfiles nil                ;; don't create annoying lockfiles
   vc-handled-backends nil             ;; speedup Tramp
   projectile-mode-line "Projectile"   ;; speedup Tramp by not showing projectile-mode-line, thus reducing the number of queries Tramp needs to make
   ;; tramp-verbose 6                  ;; for debugging Tramp
   helm-ag-use-agignore t)

  (editorconfig-mode 0)

  (ido-mode -1)
  (global-company-mode t)
  (smartparens-global-mode t)
  (spaceline-toggle-minor-modes-off) ;; Hide the minor mode icons
  (spacemacs/toggle-indent-guide-globally-on)

  (load "~/git/pyret-lang/tools/emacs/pyret.el") ;; Load Pyret

  ;; (my/linux)
  ;; (my/thai-autocomplete) ;; broken
  (my/keybinding)
  (my/general)
  (my/bracket)
  (my/multiple-cursors)
  (my/hooks)
  (my/org-mode)
  (my/racket-mode)
  (my/scribble)
  (my/git-gutter+)
  (my/indent))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol nil)
 '(package-selected-packages
   (quote
    (copy-as-format dap-mode bui tree-mode phpunit phpcbf php-extras php-auto-yasnippets helm-gtags ggtags drupal-mode counsel-gtags counsel swiper ivy company-php ac-php-core xcscope php-mode dockerfile-mode docker docker-tramp flyspell-correct reason-mode auth-source-pass wgrep smex ivy-yasnippet ivy-xref ivy-rtags ivy-purpose ivy-pass ivy-hydra flyspell-correct-ivy counsel-css yasnippet-snippets yapfify yaml-mode xterm-color ws-butler writeroom-mode winum which-key web-mode web-beautify volatile-highlights visual-regexp-steroids vi-tilde-fringe uuidgen utop use-package unicode-fonts unfill tuareg treemacs-projectile treemacs-evil toc-org tide tagedit symon symbol-overlay string-inflection spaceline-all-the-icons smeargle slim-mode shell-pop seeing-is-believing scss-mode sass-mode rvm ruby-tools ruby-test-mode ruby-refactor ruby-hash-syntax rubocopfmt rubocop rspec-mode robe rjsx-mode restart-emacs rbenv rake rainbow-mode rainbow-identifiers rainbow-delimiters racket-mode pytest pyenv-mode py-isort pug-mode proof-general prettier-js popwin pippel pipenv pip-requirements persp-mode pdf-tools password-generator paradox overseer orgit org-projectile org-present org-pomodoro org-mime org-download org-cliplink org-bullets org-brain open-junk-file ocp-indent ob-sml ob-ipython nodejs-repl nameless mwim mvn multi-term move-text mmm-mode minitest meghanada maven-test-mode markdown-toc magit-svn magit-gitflow macrostep lsp-ui lsp-treemacs lsp-python-ms lsp-java lsp-haskell lorem-ipsum livid-mode live-py-mode link-hint json-navigator json-mode js2-refactor js-doc intero insert-shebang indent-guide importmagic impatient-mode idris-mode ibuffer-projectile hungry-delete hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-rtags helm-pydoc helm-purpose helm-projectile helm-pass helm-org-rifle helm-mode-manager helm-make helm-lsp helm-hoogle helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag haskell-snippets groovy-mode groovy-imports graphviz-dot-mode gradle-mode google-translate google-c-style golden-ratio gnuplot gitignore-templates gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md fuzzy font-lock+ flyspell-correct-helm flycheck-rtags flycheck-pos-tip flycheck-package flycheck-ocaml flycheck-haskell flycheck-bashate flx-ido fish-mode fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-org evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu ess-R-data-view eshell-z eshell-prompt-extras esh-help ensime elisp-slime-nav ein editorconfig dune dumb-jump dotenv-mode doom-modeline disaster diminish diff-hl devdocs define-word dante cython-mode csv-mode cquery cpp-auto-include counsel-projectile company-web company-tern company-statistics company-shell company-rtags company-reftex company-lsp company-ghci company-ghc company-emacs-eclim company-coq company-cabal company-c-headers company-auctex company-anaconda column-enforce-mode color-identifiers-mode cmm-mode clean-aindent-mode clang-format chruby centered-cursor-mode ccls bundler browse-at-remote blacken auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile auctex-latexmk alloy-mode aggressive-indent ace-link ace-jump-helm-line ac-ispell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
